package ui;

import java.awt.Color;
import java.io.*;
import util.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

import com.lowagie.text.Document;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;
import graphics.ReportChartPanel;

import model.AdminUser;
import model.Transaction;
import model.User;

import util.ExcelExporter;

import util.ExchangeRateUtil;
import util.ReportExporter;
import util.TxtExporter;

/**
 *
 * @author muratsanli
 */
public class ReportFrame extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel(
            new String[]{"Type", "Category", "Amount", "Currency", "User", "Created_At"}, 0);
    User currentUser;

    double incomeTL = 0;
    double incomeUSD = 0;
    double incomeEUR = 0;
    double expenseTL = 0;
    double expenseUSD = 0;
    double expenseEUR = 0;
    double netBalance;

    public ReportFrame() {
        initComponents();
    }

    public ReportFrame(User user) {
        initComponents();
        tableTransactions.setModel(model);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        getContentPane().setBackground(Color.WHITE);
        searchPanel.setBackground(new Color(204, 204, 204));
        reportPanel.setBackground(new Color(204, 204, 204));

        this.currentUser = user;
        setupUserFilter();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        searchPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTransactions = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        comboSearchUser = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearchCategory = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabelMonth = new javax.swing.JLabel();
        jLabelYear = new javax.swing.JLabel();
        comboSearchMonth = new javax.swing.JComboBox<>();
        spinnerSearchYear = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        listCategories = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        reportPanel = new javax.swing.JPanel();
        btnGenerateReport = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lblTotalExpense = new javax.swing.JLabel();
        lblTotalIncome = new javax.swing.JLabel();
        lblNetBalance = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboReportUser = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listCategories1 = new javax.swing.JList<>();
        txtReportCategory = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboReportMonth = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        spinnerReportYear = new javax.swing.JSpinner();
        btnExportPdf = new javax.swing.JButton();
        exportExcelButton = new javax.swing.JButton();
        exportTxtButton = new javax.swing.JButton();
        panelChartArea = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        darkTheme = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        lightTheme = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        exportTEXTitem = new javax.swing.JMenuItem();
        exportEXCELitem = new javax.swing.JMenuItem();
        exportPDFitem = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        searchPanel.setBackground(new java.awt.Color(204, 204, 204));

        tableTransactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Type", "Category", "Amount", "Currency", "User", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableTransactions);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setText("Select User:");

        jLabel2.setText("Select Category:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabelMonth.setText("Select Month:");

        jLabelYear.setText("Select Year:");

        comboSearchMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        spinnerSearchYear.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, new java.util.Date(), java.util.Calendar.YEAR));

        listCategories.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "All", "Salary ", "Groceries", "Rent", "Transportation", "Utilities", "Food" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listCategories.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCategoriesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listCategories);

        jLabel3.setText("or write here");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelMonth)
                            .addComponent(jLabel1))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(comboSearchMonth, javax.swing.GroupLayout.Alignment.LEADING, 0, 157, Short.MAX_VALUE)
                                .addComponent(comboSearchUser, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinnerSearchYear, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addComponent(btnSearch)))
                    .addComponent(jLabelYear))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSearchUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSearchMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMonth))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelYear)
                    .addComponent(spinnerSearchYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(btnSearch)
                .addGap(38, 38, 38))
        );

        jSplitPane1.setRightComponent(jPanel1);

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Search Transactions", searchPanel);

        reportPanel.setBackground(new java.awt.Color(204, 204, 204));

        btnGenerateReport.setText("Generate Report");
        btnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        lblTotalExpense.setText("Total Expense:");

        lblTotalIncome.setText("Total Income:");

        lblNetBalance.setText("Net Balance:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTotalExpense, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .addComponent(lblTotalIncome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNetBalance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(lblTotalIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTotalExpense, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(lblNetBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jLabel4.setText("Select User:");

        jLabel5.setText("Select Category:");

        listCategories1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "All", "Salary ", "Groceries", "Rent", "Transportation", "Utilities", "Food" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listCategories1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCategories1ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listCategories1);

        jLabel6.setText("or write here");

        jLabel7.setText("Select Month:");

        comboReportMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setText("Select Year:");

        spinnerReportYear.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, new java.util.Date(), java.util.Calendar.YEAR));

        btnExportPdf.setText("Export PDF");
        btnExportPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportPdfActionPerformed(evt);
            }
        });

        exportExcelButton.setText("Export Excel");
        exportExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportExcelButtonActionPerformed(evt);
            }
        });

        exportTxtButton.setText("Export TXT");
        exportTxtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTxtButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelChartAreaLayout = new javax.swing.GroupLayout(panelChartArea);
        panelChartArea.setLayout(panelChartAreaLayout);
        panelChartAreaLayout.setHorizontalGroup(
            panelChartAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 303, Short.MAX_VALUE)
        );
        panelChartAreaLayout.setVerticalGroup(
            panelChartAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel9.setText("TL Income : BLUE");

        jLabel10.setText("TL Expense : RED");

        jLabel11.setText("USD Income : GREEN");

        jLabel12.setText("USD Expense : MAGENTA");

        jLabel13.setText("EUR Income : ORANGE");

        jLabel14.setText("EUR Expense : PINK");

        jLabel15.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel15.setText("TL CENTERED REPORT CHART");

        javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);
        reportPanel.setLayout(reportPanelLayout);
        reportPanelLayout.setHorizontalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(reportPanelLayout.createSequentialGroup()
                                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel4))
                                .addGap(31, 31, 31)
                                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(comboReportMonth, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(comboReportUser, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(spinnerReportYear, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(reportPanelLayout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtReportCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6)))))
                            .addComponent(jLabel8)))
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(btnGenerateReport)))
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelChartArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(exportExcelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(exportTxtButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExportPdf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)))
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        reportPanelLayout.setVerticalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboReportUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(32, 32, 32)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtReportCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboReportMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(20, 20, 20)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(spinnerReportYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addComponent(btnGenerateReport)
                .addGap(62, 62, 62))
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btnExportPdf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportTxtButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportExcelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelChartArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addGap(49, 49, 49))))
        );

        jTabbedPane1.addTab("Generate Reports", reportPanel);

        jMenu1.setText("Theme");

        darkTheme.setText("Dark");
        darkTheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkThemeActionPerformed(evt);
            }
        });
        jMenu1.add(darkTheme);
        jMenu1.add(jSeparator1);

        lightTheme.setText("Light");
        lightTheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightThemeActionPerformed(evt);
            }
        });
        jMenu1.add(lightTheme);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Export");

        exportTEXTitem.setText("Export TEXT");
        exportTEXTitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTEXTitemActionPerformed(evt);
            }
        });
        jMenu2.add(exportTEXTitem);

        exportEXCELitem.setText("Export Excel");
        exportEXCELitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportEXCELitemActionPerformed(evt);
            }
        });
        jMenu2.add(exportEXCELitem);

        exportPDFitem.setText("Export PDF");
        exportPDFitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPDFitemActionPerformed(evt);
            }
        });
        jMenu2.add(exportPDFitem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 997, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String selectedMonth = comboSearchMonth.getSelectedItem().toString().substring(0, 2);
            int selectedYear = (int) spinnerSearchYear.getValue();
            String selectedUser = comboSearchUser.getSelectedItem().toString();
            String category = txtSearchCategory.getText().trim();

            String sql = "SELECT * FROM transactions WHERE MONTH(created_at)=? AND YEAR(created_at)=?";
            List<Object> params = new ArrayList<>();
            params.add(Integer.parseInt(selectedMonth));
            params.add(selectedYear);

            if (!selectedUser.equals("All")) {
                sql += " AND username=?";
                params.add(selectedUser);
            }

            if (!category.isEmpty() && !category.equals("All")) {
                sql += " AND category LIKE ?";
                params.add("%" + category + "%");
            }

            try (Connection conn = DBConnection.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {

                for (int i = 0; i < params.size(); i++) {
                    ps.setObject(i + 1, params.get(i));
                }

                ResultSet rs = ps.executeQuery();

                DefaultTableModel model = new DefaultTableModel(
                        new String[]{"Type", "Category", "Amount", "Currency", "User", "Date"}, 0);

                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("type"),
                        rs.getString("category"),
                        rs.getDouble("amount"),
                        rs.getString("currency"),
                        rs.getString("username"),
                        rs.getTimestamp("created_at")
                    });
                }

                tableTransactions.setModel(model);

            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Search failed.");
        }

        if (tableTransactions.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "There are no records entered by these filters or user hasn't any record", "Couldn't find anything", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void listCategoriesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCategoriesValueChanged
        if (!evt.getValueIsAdjusting()) {
            String selectedCategory = listCategories.getSelectedValue();
            txtSearchCategory.setText(selectedCategory);
        }
    }//GEN-LAST:event_listCategoriesValueChanged

    private void btnGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateReportActionPerformed
        try {
            
            String selectedMonth = comboReportMonth.getSelectedItem().toString().substring(0, 2);
            int selectedYear = (int) spinnerReportYear.getValue();
            String selectedUser = comboReportUser.getSelectedItem().toString();
            String categoryFilter = txtReportCategory.getText().trim();
            int month = Integer.parseInt(selectedMonth);

            
            String sql = "SELECT type, amount, currency FROM transactions WHERE MONTH(created_at) = ? AND YEAR(created_at) = ?";
            List<Object> params = new ArrayList<>();
            params.add(month);
            params.add(selectedYear);

            if (!selectedUser.equals("All")) {
                sql += " AND username = ?";
                params.add(selectedUser);
            }

            if (!categoryFilter.isEmpty() && !categoryFilter.equals("All")) {
                sql += " AND category LIKE ?";
                params.add("%" + categoryFilter + "%");
            }

            
            double usdToTry = ExchangeRateUtil.getExchangeRate("USD", "TRY");
            double eurToTry = ExchangeRateUtil.getExchangeRate("EUR", "TRY");

            
            incomeTL = 0;
            incomeUSD = 0;
            incomeEUR = 0;
            expenseTL = 0;
            expenseUSD = 0;
            expenseEUR = 0;

            try (Connection conn = DBConnection.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
                for (int i = 0; i < params.size(); i++) {
                    ps.setObject(i + 1, params.get(i));
                }

                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    String type = rs.getString("type");
                    double amount = rs.getDouble("amount");
                    String currency = rs.getString("currency");

                    if ("Income".equalsIgnoreCase(type)) {
                        switch (currency) {
                            case "TL" ->
                                incomeTL += amount;
                            case "USD" ->
                                incomeUSD += amount;
                            case "EUR" ->
                                incomeEUR += amount;
                        }
                    } else if ("Expense".equalsIgnoreCase(type)) {
                        switch (currency) {
                            case "TL" ->
                                expenseTL += amount;
                            case "USD" ->
                                expenseUSD += amount;
                            case "EUR" ->
                                expenseEUR += amount;
                        }
                    }
                }
            }

           
            lblTotalIncome.setText("Total Income: "
                    + String.format("%.2f TL | %.2f USD | %.2f EUR", incomeTL, incomeUSD, incomeEUR));

            lblTotalExpense.setText("Total Expense: "
                    + String.format("%.2f TL | %.2f USD | %.2f EUR", expenseTL, expenseUSD, expenseEUR));

            double totalIncomeInTL = incomeTL + (incomeUSD * usdToTry) + (incomeEUR * eurToTry);
            double totalExpenseInTL = expenseTL + (expenseUSD * usdToTry) + (expenseEUR * eurToTry);
            netBalance = totalIncomeInTL - totalExpenseInTL;

            lblNetBalance.setText("Net Balance (in TL): " + String.format("%.2f", netBalance));

           
            ReportChartPanel chart = new ReportChartPanel(incomeTL, incomeUSD * usdToTry, incomeEUR * eurToTry, expenseTL, expenseUSD * usdToTry, expenseEUR * eurToTry);
            chart.setBounds(0, 0, panelChartArea.getWidth(), panelChartArea.getHeight());
            panelChartArea.removeAll();
            panelChartArea.add(chart);
            panelChartArea.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while generating the report.");
        }
    }//GEN-LAST:event_btnGenerateReportActionPerformed

    private void exportEXCELitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportEXCELitemActionPerformed
        List<Transaction> data = getFilteredTransactionListForExport();

        String user = comboReportUser.getSelectedItem().toString();
        String category = txtReportCategory.getText();
        String month = comboReportMonth.getSelectedItem().toString();
        String year = spinnerReportYear.getValue().toString();

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export Excel Report");
        chooser.setDialogTitle("Save Report As");
        chooser.setSelectedFile(new File("monthly_report"));
        int result = chooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();

            if (!filePath.toLowerCase().endsWith(".xlsx")) {
                filePath += ".xlsx";
            }
            selectedFile = new File(filePath);

            ReportExporter<Transaction> exporter = new ExcelExporter(user, category, month, year,
                    incomeTL, incomeUSD, incomeEUR,
                    expenseTL, expenseUSD, expenseEUR, netBalance);

            exporter.export(data, selectedFile);
            JOptionPane.showMessageDialog(this, "Excel exported successfully!");
        }
    }//GEN-LAST:event_exportEXCELitemActionPerformed

    private void listCategories1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCategories1ValueChanged
        if (!evt.getValueIsAdjusting()) {
            String selectedCategory = listCategories1.getSelectedValue();
            txtReportCategory.setText(selectedCategory);
        }
    }//GEN-LAST:event_listCategories1ValueChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        String[] months = {
            "01 - January", "02 - February", "03 - March", "04 - April",
            "05 - May", "06 - June", "07 - July", "08 - August",
            "09 - September", "10 - October", "11 - November", "12 - December"
        };
        comboSearchMonth.removeAllItems();
        comboReportMonth.removeAllItems();
        for (String m : months) {
            comboSearchMonth.addItem(m);
            comboReportMonth.addItem(m);
        }

       
        spinnerSearchYear.setModel(new SpinnerNumberModel(LocalDate.now().getYear(), 2000, 2100, 1));
        spinnerReportYear.setModel(new SpinnerNumberModel(LocalDate.now().getYear(), 2000, 2100, 1));
    }//GEN-LAST:event_formWindowOpened

    private void btnExportPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportPdfActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export PDF Report");
        chooser.setDialogTitle("Save Report As");
        chooser.setSelectedFile(new File("monthly_report"));

        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();

            Document document = new Document();
            try {
                PdfWriter.getInstance(document, new FileOutputStream(file + ".pdf"));
                document.open();

                document.add(new Paragraph("===== Monthly Financial Report ====="));
                document.add(new Paragraph("Month: " + comboReportMonth.getSelectedItem()));
                document.add(new Paragraph("Year: " + spinnerReportYear.getValue()));

                String user = comboReportUser.getSelectedItem().toString();
                String category = txtReportCategory.getText().trim();

                if (!user.equals("All")) {
                    document.add(new Paragraph("User: " + user));
                }
                if (user.equals("All")) {
                    document.add(new Paragraph("User Filter: All Users"));
                }

                if (!category.isEmpty()) {
                    document.add(new Paragraph("Category: " + category));
                }

                document.add(new Paragraph("\nTotal Income:"));
                document.add(new Paragraph(" - " + incomeTL + " TL"));
                document.add(new Paragraph(" - " + incomeUSD + " USD"));
                document.add(new Paragraph(" - " + incomeEUR + " EUR"));

                document.add(new Paragraph("\nTotal Expense:"));
                document.add(new Paragraph(" - " + expenseTL + " TL"));
                document.add(new Paragraph(" - " + expenseUSD + " USD"));
                document.add(new Paragraph(" - " + expenseEUR + " EUR"));

                document.add(new Paragraph("\nNet Balance (in TL): " + String.format("%.2f", netBalance)));

                document.add(new Paragraph("===================================="));

                document.close();
                JOptionPane.showMessageDialog(this, "PDF exported successfully!");
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "PDF export failed.");
            }
        }

    }//GEN-LAST:event_btnExportPdfActionPerformed

    private void darkThemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkThemeActionPerformed
        this.getContentPane().setBackground(new Color(51, 51, 51));
        searchPanel.setBackground(new Color(102, 102, 102));
        reportPanel.setBackground(new Color(102, 102, 102));
        jPanel4.setBackground(new Color(204, 204, 204));

        jLabel8.setForeground(Color.WHITE);
        jLabel7.setForeground(Color.WHITE);
        jLabel6.setForeground(Color.WHITE);
        jLabel5.setForeground(Color.WHITE);
        jLabel4.setForeground(Color.WHITE);


    }//GEN-LAST:event_darkThemeActionPerformed

    private void lightThemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lightThemeActionPerformed
        this.getContentPane().setBackground(Color.WHITE);
        searchPanel.setBackground(new Color(204, 204, 204));
        reportPanel.setBackground(new Color(204, 204, 204));
        jPanel4.setBackground(Color.WHITE);

        jLabel8.setForeground(Color.BLACK);
        jLabel7.setForeground(Color.BLACK);
        jLabel6.setForeground(Color.BLACK);
        jLabel5.setForeground(Color.BLACK);
        jLabel4.setForeground(Color.BLACK);
    }//GEN-LAST:event_lightThemeActionPerformed

    private void exportExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportExcelButtonActionPerformed
        List<Transaction> data = getFilteredTransactionListForExport();

        String user = comboReportUser.getSelectedItem().toString();
        String category = txtReportCategory.getText();
        String month = comboReportMonth.getSelectedItem().toString();
        String year = spinnerReportYear.getValue().toString();

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export Excel Report");
        chooser.setDialogTitle("Save Report As");
        chooser.setSelectedFile(new File("monthly_report"));
        int result = chooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();

            if (!filePath.toLowerCase().endsWith(".xlsx")) {
                filePath += ".xlsx";
            }
            selectedFile = new File(filePath);

            ReportExporter<Transaction> exporter = new ExcelExporter(user, category, month, year,
                    incomeTL, incomeUSD, incomeEUR,
                    expenseTL, expenseUSD, expenseEUR, netBalance);

            exporter.export(data, selectedFile);
            JOptionPane.showMessageDialog(this, "Excel exported successfully!");
        }
    }//GEN-LAST:event_exportExcelButtonActionPerformed

    private void exportTxtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTxtButtonActionPerformed
        List<Transaction> data = getFilteredTransactionListForExport();

        String user = comboReportUser.getSelectedItem().toString();
        String category = txtReportCategory.getText();
        String month = comboReportMonth.getSelectedItem().toString();
        String year = spinnerReportYear.getValue().toString();

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export Text Report");
        chooser.setDialogTitle("Save Report As");
        chooser.setSelectedFile(new File("monthly_report"));
        int result = chooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();

            if (!filePath.toLowerCase().endsWith(".txt")) {
                filePath += ".txt";
            }
            selectedFile = new File(filePath);

            ReportExporter<Transaction> exporter = new TxtExporter(user, category, month, year,
                    incomeTL, incomeUSD, incomeEUR,
                    expenseTL, expenseUSD, expenseEUR, netBalance);

            exporter.export(data, selectedFile);
            JOptionPane.showMessageDialog(this, "TXT exported successfully!");
        }
    }//GEN-LAST:event_exportTxtButtonActionPerformed

    private void exportTEXTitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTEXTitemActionPerformed
        List<Transaction> data = getFilteredTransactionListForExport();

        String user = comboReportUser.getSelectedItem().toString();
        String category = txtReportCategory.getText();
        String month = comboReportMonth.getSelectedItem().toString();
        String year = spinnerReportYear.getValue().toString();

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export Text Report");
        chooser.setDialogTitle("Save Report As");
        chooser.setSelectedFile(new File("monthly_report"));
        int result = chooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();

            if (!filePath.toLowerCase().endsWith(".txt")) {
                filePath += ".txt";
            }
            selectedFile = new File(filePath);

            ReportExporter<Transaction> exporter = new TxtExporter(user, category, month, year,
                    incomeTL, incomeUSD, incomeEUR,
                    expenseTL, expenseUSD, expenseEUR, netBalance);

            exporter.export(data, selectedFile);
            JOptionPane.showMessageDialog(this, "TXT exported successfully!");
        }
    }//GEN-LAST:event_exportTEXTitemActionPerformed

    private void exportPDFitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPDFitemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export PDF Report");
        chooser.setDialogTitle("Save Report As");
        chooser.setSelectedFile(new File("monthly_report"));

        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();

            Document document = new Document();
            try {
                PdfWriter.getInstance(document, new FileOutputStream(file + ".pdf"));
                document.open();

                document.add(new Paragraph("===== Monthly Financial Report ====="));
                document.add(new Paragraph("Month: " + comboReportMonth.getSelectedItem()));
                document.add(new Paragraph("Year: " + spinnerReportYear.getValue()));

                String user = comboReportUser.getSelectedItem().toString();
                String category = txtReportCategory.getText().trim();

                if (!user.equals("All")) {
                    document.add(new Paragraph("User: " + user));
                }
                if (user.equals("All")) {
                    document.add(new Paragraph("User Filter: All Users"));
                }

                if (!category.isEmpty()) {
                    document.add(new Paragraph("Category: " + category));
                }

                document.add(new Paragraph("\nTotal Income:"));
                document.add(new Paragraph(" - " + incomeTL + " TL"));
                document.add(new Paragraph(" - " + incomeUSD + " USD"));
                document.add(new Paragraph(" - " + incomeEUR + " EUR"));

                document.add(new Paragraph("\nTotal Expense:"));
                document.add(new Paragraph(" - " + expenseTL + " TL"));
                document.add(new Paragraph(" - " + expenseUSD + " USD"));
                document.add(new Paragraph(" - " + expenseEUR + " EUR"));

                document.add(new Paragraph("\nNet Balance (in TL): " + String.format("%.2f", netBalance)));

                document.add(new Paragraph("===================================="));

                document.close();
                JOptionPane.showMessageDialog(this, "PDF exported successfully!");
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "PDF export failed.");
            }
        }
    }//GEN-LAST:event_exportPDFitemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReportFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportPdf;
    private javax.swing.JButton btnGenerateReport;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboReportMonth;
    private javax.swing.JComboBox<String> comboReportUser;
    private javax.swing.JComboBox<String> comboSearchMonth;
    private javax.swing.JComboBox<String> comboSearchUser;
    private javax.swing.JMenuItem darkTheme;
    private javax.swing.JMenuItem exportEXCELitem;
    private javax.swing.JButton exportExcelButton;
    private javax.swing.JMenuItem exportPDFitem;
    private javax.swing.JMenuItem exportTEXTitem;
    private javax.swing.JButton exportTxtButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelMonth;
    private javax.swing.JLabel jLabelYear;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblNetBalance;
    private javax.swing.JLabel lblTotalExpense;
    private javax.swing.JLabel lblTotalIncome;
    private javax.swing.JMenuItem lightTheme;
    private javax.swing.JList<String> listCategories;
    private javax.swing.JList<String> listCategories1;
    private javax.swing.JPanel panelChartArea;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JSpinner spinnerReportYear;
    private javax.swing.JSpinner spinnerSearchYear;
    private javax.swing.JTable tableTransactions;
    private javax.swing.JTextField txtReportCategory;
    private javax.swing.JTextField txtSearchCategory;
    // End of variables declaration//GEN-END:variables

    private void setupUserFilter() {

        comboReportUser.removeAllItems();
        comboSearchUser.removeAllItems();

        if (currentUser instanceof AdminUser) {
            comboReportUser.addItem("All");
            comboSearchUser.addItem("All");

            try (Connection conn = DBConnection.getConnection(); Statement st = conn.createStatement(); ResultSet rs = st.executeQuery("SELECT username FROM users WHERE role = 'Accountant'")) {
                while (rs.next()) {
                    comboReportUser.addItem(rs.getString("username"));
                    comboSearchUser.addItem(rs.getString("username"));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            comboReportUser.addItem(currentUser.getUsername());
            comboReportUser.setEnabled(false); // sadece kendi adını görür
            comboSearchUser.addItem(currentUser.getUsername());
            comboSearchUser.setEnabled(false); // sadece kendi adını görür

        }
    }

    public List<Transaction> getFilteredTransactionListForExport() {
        List<Transaction> list = new ArrayList<>();

        try {
            Connection conn = DBConnection.getConnection();
            String sql = "SELECT created_at, category, amount, currency, description FROM transactions "
                    + "WHERE MONTH(created_at) = ? AND YEAR(created_at) = ?";

            int selectedMonth = Integer.parseInt(comboReportMonth.getSelectedItem().toString().substring(0, 2));
            int selectedYear = (int) spinnerReportYear.getValue();

            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, selectedMonth);
            stmt.setInt(2, selectedYear);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                String created_at = rs.getString("created_at");
                String category = rs.getString("category");
                double amount = rs.getDouble("amount");
                String currency = rs.getString("currency");
                String description = rs.getString("description");

                list.add(new Transaction(created_at, category, amount, currency, description));
            }

            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return list;
    }

//    private ReportData generateReportFromDatabase(String user, String category, int month, int year) {
//        ReportData data = new ReportData();
//
//        try {
//            double rateUSD = ExchangeRateUtil.getExchangeRate("USD", "TRY");
//            double rateEUR = ExchangeRateUtil.getExchangeRate("EUR", "TRY");
//
//            Connection conn = DBConnection.getConnection();
//            String sql = "SELECT type, amount, currency FROM transactions WHERE MONTH(created_at) = ? AND YEAR(created_at = ?)";
//            if (!user.equals("All")) {
//                sql += " AND username = ?";
//            }
//            if (!category.isEmpty()) {
//                sql += " AND category = ?";
//            }
//
//            PreparedStatement stmt = conn.prepareStatement(sql);
//            stmt.setInt(1, month);
//            stmt.setInt(2, year);
//            int index = 3;
//            if (!user.equals("All")) {
//                stmt.setString(index++, user);
//            }
//            if (!category.isEmpty()) {
//                stmt.setString(index, category);
//            }
//
//            ResultSet rs = stmt.executeQuery();
//            while (rs.next()) {
//                String type = rs.getString("type");
//                double amount = rs.getDouble("amount");
//                String currency = rs.getString("currency");
//
//                if (currency.equals("USD")) {
//                    amount *= rateUSD;
//                } else if (currency.equals("EUR")) {
//                    amount *= rateEUR;
//                }
//
//                if (type.equalsIgnoreCase("income")) {
//                    if (currency.equals("USD")) {
//                        data.incomeUSD += amount;
//                    } else if (currency.equals("EUR")) {
//                        data.incomeEUR += amount;
//                    } else {
//                        data.incomeTL += amount;
//                    }
//                } else {
//                    if (currency.equals("USD")) {
//                        data.expenseUSD += amount;
//                    } else if (currency.equals("EUR")) {
//                        data.expenseEUR += amount;
//                    } else {
//                        data.expenseTL += amount;
//                    }
//                }
//            }
//
//            conn.close();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//        return data;
//    }
}
